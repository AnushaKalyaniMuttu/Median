public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Ensure that nums1 is the smaller array to make partitioning easier.
        if (nums1.length > nums2.length) {
            return findMedianSortedArrays(nums2, nums1);
        }
        
        int m = nums1.length;
        int n = nums2.length;
        int totalLeft = (m + n + 1) / 2;
        
        int left = 0, right = m;
        
        while (left <= right) {
            int i = left + (right - left) / 2;
            int j = totalLeft - i;
            
            int nums1LeftMax = (i == 0) ? Integer.MIN_VALUE : nums1[i - 1];
            int nums1RightMin = (i == m) ? Integer.MAX_VALUE : nums1[i];
            int nums2LeftMax = (j == 0) ? Integer.MIN_VALUE : nums2[j - 1];
            int nums2RightMin = (j == n) ? Integer.MAX_VALUE : nums2[j];
            
            if (nums1LeftMax <= nums2RightMin && nums2LeftMax <= nums1RightMin) {
                // We have partitioned both arrays correctly
                if ((m + n) % 2 == 1) {
                    return Math.max(nums1LeftMax, nums2LeftMax); // Odd case
                } else {
                    return (Math.max(nums1LeftMax, nums2LeftMax) + Math.min(nums1RightMin, nums2RightMin)) / 2.0; // Even case
                }
            } else if (nums1LeftMax > nums2RightMin) {
                right = i - 1; // Move left in nums1
            } else {
                left = i + 1; // Move right in nums1
            }
        }
        
        throw new IllegalArgumentException("Input arrays are not sorted.");
    }
}
//The time complexity is O(log(min(m, n))), where m and n are the sizes of the two arrays. This satisfies the requirement of O(log (m + n))
